package org.firstinspires.ftc.teamcode.Autonomous;import com.acmerobotics.roadrunner.AccelConstraint;import com.acmerobotics.roadrunner.Action;import com.acmerobotics.roadrunner.AngularVelConstraint;import com.acmerobotics.roadrunner.MinVelConstraint;import com.acmerobotics.roadrunner.ParallelAction;import com.acmerobotics.roadrunner.Pose2d;import com.acmerobotics.roadrunner.ProfileAccelConstraint;import com.acmerobotics.roadrunner.SequentialAction;import com.acmerobotics.roadrunner.SleepAction;import com.acmerobotics.roadrunner.TrajectoryActionBuilder;import com.acmerobotics.roadrunner.TranslationalVelConstraint;import com.acmerobotics.roadrunner.Vector2d;import com.acmerobotics.roadrunner.VelConstraint;import com.acmerobotics.roadrunner.ftc.Actions;import com.qualcomm.robotcore.eventloop.opmode.Autonomous;import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;import com.qualcomm.robotcore.eventloop.opmode.OpMode;import com.qualcomm.robotcore.hardware.DcMotor;import org.firstinspires.ftc.teamcode.RoadRunner.MecanumDrive;import org.firstinspires.ftc.teamcode.Subsystem.HardwareConfig;import org.firstinspires.ftc.teamcode.Subsystem.Slides_Methods;import org.firstinspires.ftc.teamcode.Subsystem.Valores.Constants;import org.opencv.core.Mat;import java.util.Arrays;@Autonomouspublic class testeauto extends LinearOpMode {    double Side = -1;    @Override    public void runOpMode() {        HardwareConfig hw = new HardwareConfig(hardwareMap);        hw.outtakeSlideL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);        hw.outtakeSlideR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);        hw.outtakeSlideL.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);        hw.outtakeSlideR.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);        while (!isStarted() && !isStopRequested()) {            if (gamepad1.a) {                hw.clawOut.setPosition(Constants.GARRA_OUTTAKE_ABERTA);            } else {                hw.clawOut.setPosition(Constants.GARRA_OUTTAKE_FECHADA);            }            if(gamepad1.right_bumper){                Side = 1;            }            if(gamepad1.left_bumper){                Side = 2;            }            if(Side == 2) {                telemetry.addData("Samples", null);            } else if(Side == 1){                telemetry.addData("Specimens", null);            } else {                telemetry.addData("Escolha o lado rightBumper para specimens e leftbumper para samples", null);            }            telemetry.update();        }        waitForStart();        if(Side == 2) {            Actions.runBlocking(                    Samples1()            );        } else if(Side == 1){            Actions.runBlocking(                    Specimens()            );        } else {            telemetry.addData("Escolha o lado rightBumper para specimens e leftbumper para samples", null);        }        telemetry.update();    }    private Action Samples(){        Pose2d initialPose = new Pose2d(38, 61, Math.toRadians(270));        MecanumDrive drive = new MecanumDrive(hardwareMap, initialPose);        VelConstraint baseVelConstraint = new MinVelConstraint(Arrays.asList(                new TranslationalVelConstraint(50.0),                new AngularVelConstraint(Math.PI/2)        ));        AccelConstraint baseAccelConstraint = new ProfileAccelConstraint(-30, 50);        HardwareConfig hardwareConfig = new HardwareConfig(hardwareMap);        RobotActions.Lift elevadores = new RobotActions.Lift(hardwareConfig);        RobotActions.ClawOut garraOut = new RobotActions.ClawOut(hardwareConfig);        RobotActions.Intake bracointake = new RobotActions.Intake(hardwareConfig);        RobotActions.ClawIn garraIn = new RobotActions.ClawIn(hardwareConfig);        RobotActions.ExtensionControl extensionControl = new RobotActions.ExtensionControl(hardwareConfig);        RobotActions.Outtake outtake = new RobotActions.Outtake(hardwareConfig);        TrajectoryActionBuilder tab1 = drive.actionBuilder(initialPose)                .lineToYConstantHeading(53)                .turnTo(Math.toRadians(325))                .lineToYConstantHeading(45)                .turnTo(Math.toRadians(225))                .lineToYConstantHeading(50)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(3100),                                outtake.outtakeToTarget(2),                                garraOut.openClaw(),                                new SleepAction(0.3),                                outtake.outtakeToTarget(-1),                                elevadores.liftToTarget(0)                        )                )                .lineToX(49)                .strafeToLinearHeading(new Vector2d(45, 58), Math.toRadians(270))                .turnTo(Math.toRadians(270))                .stopAndAdd(                        new SequentialAction(                                extensionControl.extendTarget(-150),                                new SleepAction(0.5),                                garraIn.openClaw(),                                bracointake.VertColet(),                                new SleepAction(1),                                garraOut.openClaw(),                                garraIn.closeClaw(),                                new SleepAction(0.5),                                bracointake.retract(),                                new SleepAction(1),                                extensionControl.extendTarget(200),                                bracointake.pass(),                                new SleepAction(0.5),                                garraOut.closeClaw(),                                new SleepAction(0.5),                                garraIn.openClaw()                        )                )                .turnTo(Math.toRadians(220))                .lineToY(55)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(3100),                                outtake.outtakeToTarget(2),                                garraOut.openClaw(),                                new SleepAction(0.3),                                outtake.outtakeToTarget(-1),                                elevadores.liftToTarget(0)                        )                )                .endTrajectory();        return tab1.build();    }    private Action Specimens(){        Pose2d initialPose = new Pose2d(-10, 61, Math.toRadians(90));        MecanumDrive drive = new MecanumDrive(hardwareMap, initialPose);        VelConstraint baseVelConstraint = new MinVelConstraint(Arrays.asList(                new TranslationalVelConstraint(50.0),                new AngularVelConstraint(Math.PI/2)        ));        AccelConstraint baseAccelConstraint = new ProfileAccelConstraint(-30, 50);        HardwareConfig hardwareConfig = new HardwareConfig(hardwareMap);        RobotActions.Lift elevadores = new RobotActions.Lift(hardwareConfig);        RobotActions.ClawOut garraOut = new RobotActions.ClawOut(hardwareConfig);        RobotActions.Intake bracointake = new RobotActions.Intake(hardwareConfig);        RobotActions.ClawIn garraIn = new RobotActions.ClawIn(hardwareConfig);        RobotActions.ExtensionControl extensionControl = new RobotActions.ExtensionControl(hardwareConfig);        RobotActions.Outtake outtake = new RobotActions.Outtake(hardwareConfig);        TrajectoryActionBuilder tab1 = drive.actionBuilder(initialPose)                .stopAndAdd(                        new SequentialAction(                                outtake.outtakeToTarget(2),                                elevadores.liftToTarget(1130)                        )                )                .lineToYConstantHeading(27)                .stopAndAdd(                        new SequentialAction(                                garraOut.openClaw(),                                elevadores.liftToTarget(1275)                        )                )                .lineToYConstantHeading(60)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(0),                                outtake.outtakeToTarget(-1)                        )                )                .turnTo(Math.toRadians(177))                .lineToXConstantHeading(-15.5)                .stopAndAdd(                        new SequentialAction(                                extensionControl.extendTarget(-150),                                garraIn.openClaw(),                                bracointake.VertColet(),                                new SleepAction(1),                                garraOut.openClaw(),                                garraIn.closeClaw(),                                new SleepAction(0.5),                                bracointake.retract(),                                new SleepAction(1),                                extensionControl.extendTarget(200),                                bracointake.pass(),                                new SleepAction(0.8),                                garraOut.closeClaw(),                                new SleepAction(0.5),                                garraIn.openClaw()                        )                )                .turnTo(Math.toRadians(140))                .lineToXConstantHeading(-3)                .turnTo(Math.toRadians(90))                .stopAndAdd(                        new SequentialAction(                                outtake.outtakeToTarget(2),                                elevadores.liftToTarget(1130)                        )                )                .lineToYConstantHeading(29)                .stopAndAdd(                        new SequentialAction(                                garraOut.openClaw(),                                outtake.outtakeToTarget(-1)                        )                )                .endTrajectory();        return tab1.build();    }    private Action SamplesFast(){        Pose2d initialPose = new Pose2d(38, 61, Math.toRadians(270));        MecanumDrive drive = new MecanumDrive(hardwareMap, initialPose);        VelConstraint baseVelConstraint = new MinVelConstraint(Arrays.asList(                new TranslationalVelConstraint(100.0),                new AngularVelConstraint(Math.PI/2)        ));        AccelConstraint baseAccelConstraint = new ProfileAccelConstraint(-100, 100);        HardwareConfig hardwareConfig = new HardwareConfig(hardwareMap);        RobotActions.Lift elevadores = new RobotActions.Lift(hardwareConfig);        RobotActions.ClawOut garraOut = new RobotActions.ClawOut(hardwareConfig);        RobotActions.Intake bracointake = new RobotActions.Intake(hardwareConfig);        RobotActions.ClawIn garraIn = new RobotActions.ClawIn(hardwareConfig);        RobotActions.ExtensionControl extensionControl = new RobotActions.ExtensionControl(hardwareConfig);        RobotActions.Outtake outtake = new RobotActions.Outtake(hardwareConfig);        TrajectoryActionBuilder tab1 = drive.actionBuilder(initialPose)                .stopAndAdd(                        new SequentialAction(                                extensionControl.extendTarget(-150)                        )                )                .lineToYConstantHeading(56)                .strafeToLinearHeading(new Vector2d(20, 56), Math.toRadians(270))                .turnTo(Math.toRadians(220))                .lineToYConstantHeading(55.8)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(3100),                                outtake.outtakeToTarget(2),                                garraOut.openClaw(),                                new SleepAction(0.3),                                outtake.outtakeToTarget(-1),                                elevadores.liftToTarget(0)                        )                )                .lineToYConstantHeading(54)                .turnTo(Math.toRadians(264))                .stopAndAdd(                new SequentialAction(                        garraIn.openClaw(),                        bracointake.VertColet(),                        new SleepAction(1),                        garraOut.openClaw(),                        garraIn.closeClaw(),                        new SleepAction(0.5),                        bracointake.retract(),                        new SleepAction(1),                        extensionControl.extendTarget(200),                        bracointake.pass(),                        new SleepAction(0.8),                        garraOut.closeClaw(),                        new SleepAction(0.5),                        garraIn.openClaw()                )        )                .turnTo(Math.toRadians(210))                .lineToYConstantHeading(56.5)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(3100),                                outtake.outtakeToTarget(2),                                garraOut.openClaw(),                                new SleepAction(0.3),                                outtake.outtakeToTarget(-1),                                elevadores.liftToTarget(0)                        )                )                .endTrajectory();        return tab1.build();    }    private Action Samples1(){        Pose2d initialPose = new Pose2d(38, 61, Math.toRadians(270));        MecanumDrive drive = new MecanumDrive(hardwareMap, initialPose);        VelConstraint baseVelConstraint = new MinVelConstraint(Arrays.asList(                new TranslationalVelConstraint(50.0),                new AngularVelConstraint(Math.PI/2)        ));        AccelConstraint baseAccelConstraint = new ProfileAccelConstraint(-30, 50);        HardwareConfig hardwareConfig = new HardwareConfig(hardwareMap);        RobotActions.Lift elevadores = new RobotActions.Lift(hardwareConfig);        RobotActions.ClawOut garraOut = new RobotActions.ClawOut(hardwareConfig);        RobotActions.Intake bracointake = new RobotActions.Intake(hardwareConfig);        RobotActions.ClawIn garraIn = new RobotActions.ClawIn(hardwareConfig);        RobotActions.ExtensionControl extensionControl = new RobotActions.ExtensionControl(hardwareConfig);        RobotActions.Outtake outtake = new RobotActions.Outtake(hardwareConfig);        TrajectoryActionBuilder tab1 = drive.actionBuilder(initialPose)                .lineToYConstantHeading(53)                .turnTo(Math.toRadians(325))                .lineToYConstantHeading(45)                .turnTo(Math.toRadians(225))                .lineToYConstantHeading(51.8)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(3000),                                outtake.outtakeToTarget(2),                                garraOut.openClaw(),                                new SleepAction(0.3),                                outtake.outtakeToTarget(-1),                                elevadores.liftToTarget(0)                        )                )                .lineToX(49)                .strafeToLinearHeading(new Vector2d(45, 58), Math.toRadians(270))                .turnTo(Math.toRadians(271))                .stopAndAdd(                        new SequentialAction(                                extensionControl.extendTarget(-150),                                new SleepAction(0.5),                                garraIn.openClaw(),                                bracointake.VertColet(),                                new SleepAction(1),                                garraOut.openClaw(),                                garraIn.closeClaw(),                                new SleepAction(0.5),                                bracointake.retract(),                                new SleepAction(1),                                extensionControl.extendTarget(200),                                bracointake.pass(),                                new SleepAction(0.5),                                garraOut.closeClaw(),                                new SleepAction(0.5),                                garraIn.openClaw()                        )                )                .turnTo(Math.toRadians(220))                .lineToY(57.8)                .stopAndAdd(                        new SequentialAction(                                elevadores.liftToTarget(3000),                                outtake.outtakeToTarget(2),                                garraOut.openClaw(),                                new SleepAction(0.3),                                outtake.outtakeToTarget(-1),                                elevadores.liftToTarget(0)                        )                )                .endTrajectory();        return tab1.build();    }}